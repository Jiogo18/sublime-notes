# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Notes
scopeName: source.notes
fileTypes: [notes]
uuid: b9bf3970-f517-46fd-a7f8-ae78fd761f84

# - comment:
#   name: string.regexp.notes
#   begin: (\[\])
#   end: (\[\\?\/?(end|)\])
#   patterns:
#   - {include: source.}

patterns:
- comment: Actionscript
  name: string.regexp.notes
  begin: (\[(actionscript|as)\])
  end: (\[\\?\/?(end|actionscript|as)\])
  patterns: 
  - {include: source.actionscript.2}
- comment: Applescript
  name: string.regexp.notes
  begin: (\[(applescript)\])
  end: (\[\\?\/?(end|applescript)\])
  patterns: 
  - {include: source.applescript}
- comment: ASP
  name: string.regexp.notes
  begin: (\[(asp|asa)\])
  end: (\[\\?\/?(end|asp|asa)\])
  patterns: 
  - {include: source.asp}
- comment: C
  name: string.regexp.notes
  begin: (\[(c)\])
  end: (\[\\?\/?(end|c)\])
  patterns: 
  - {include: source.c}
- comment: C#
  name: string.regexp.notes
  begin: (\[(cs|c#|csharp)\])
  end: (\[\\?\/?(end|cs|c#|csharp)\])
  patterns: 
  - {include: source.cs}
- comment: C++
  name: string.regexp.notes
  begin: (\[(c\+\+|cpp|cc|cxx)\])
  end: (\[\\?\/?(end|c\+\+|cpp|cc|cxx)\])
  patterns: 
  - {include: source.c++}
- comment: Clojure
  name: string.regexp.notes
  begin: (\[(clj|clojure)\])
  end: (\[\\?\/?(end|clj|clojure)\])
  patterns: 
  - {include: source.clojure}
- comment: CSS
  name: string.regexp.notes
  begin: (\[(css)\])
  end: (\[\\?\/?(end|css)\])
  patterns: 
  - {include: source.css}
- comment: D
  name: string.regexp.notes
  begin: (\[(di)\])
  end: (\[\\?\/?(end|di)\])
  patterns: 
  - {include: source.d}
- comment: Erlang
  name: string.regexp.notes
  begin: (\[(erl|hrl|Emakefile|emakefile|)\])
  end: (\[\\?\/?(end|erl|hrl|Emakefile|emakefile|)\])
  patterns: 
  - {include: source.erlang}
- comment: Go
  name: string.regexp.notes
  begin: (\[(go|golang)\])
  end: (\[\\?\/?(end|go|golang)\])
  patterns: 
  - {include: source.go}
- comment: Groovy
  name: string.regexp.notes
  begin: (\[(groovy|gvy)\])
  end: (\[\\?\/?(end|groovy|gvy)\])
  patterns: 
  - {include: source.groovy}
- comment: Haskell
  name: string.regexp.notes
  begin: (\[(hs|haskell)\])
  end: (\[\\?\/?(end|hs|haskell)\])
  patterns: 
  - {include: source.haskell}
- comment: HTML
  name: string.regexp.notes
  begin: (\[(html|htm|shtml|xhtml|phtml|inc|tmpl|tpl|ctp)\])
  end: (\[\\?\/?(end|html|htm|shtml|xhtml|phtml|inc|tmpl|tpl|ctp)\])
  patterns: 
  - {include: text.html.basic}
- comment: Java
  name: string.regexp.notes
  begin: (\[(java|bsh)\])
  end: (\[\\?\/?(end|java|bsh)\])
  patterns: 
  - {include: source.java}
- comment: Javascript
  name: string.regexp.notes
  begin: (\[(js|jsx|htc|javascript)\])
  end: (\[\\?\/?(end|js|jsx|htc|javascript)\])
  patterns: 
  - {include: source.js}
- comment: Lua
  name: string.regexp.notes
  begin: (\[(lua)\])
  end: (\[\\?\/?(end|lua)\])
  patterns: 
  - {include: source.lua}
- comment: Makefile
  name: string.regexp.notes
  begin: (\[(gnumakefile|makefile|makefile|ocamlmakefile|make)\])
  end: (\[\\?\/?(end|gnumakefile|makefile|makefile|ocamlmakefile|make)\])
  patterns: 
  - {include: source.makefile}
- comment: Markdown
  name: string.regexp.notes
  begin: (\[(mdown|markdown|markdn|md)\])
  end: (\[\\?\/?(end|mdown|markdown|markdn|md)\])
  patterns: 
  - {include: text.html.markdown}
- comment: Matlab
  name: string.regexp.notes
  begin: (\[(matlab)\])
  end: (\[\\?\/?(end|matlab)\])
  patterns: 
  - {include: source.matlab}
- comment: Objective-c
  name: string.regexp.notes
  begin: (\[(objective-c|objc|m|h)\])
  end: (\[\\?\/?(end|objective-c|objc|m|h)\])
  patterns: 
  - {include: source.objc}
- comment: Ocaml
  name: string.regexp.notes
  begin: (\[(ocaml|ml|mli)\])
  end: (\[\\?\/?(end|ocaml|ml|mli)\])
  patterns: 
  - {include: source.ocaml}
- comment: Pascal
  name: string.regexp.notes
  begin: (\[(p|pas|pascal)\])
  end: (\[\\?\/?(end|p|pas|pascal)\])
  patterns: 
  - {include: source.pascal}
- comment: Perl
  name: string.regexp.notes
  begin: (\[(pm|pl|pod|t|perl)\])
  end: (\[\\?\/?(end|pm|pl|pod|t|perl)\])
  patterns: 
  - {include: source.perl}
- comment: PHP
  name: string.regexp.notes
  begin: (\[(php)\])
  end: (\[\\?\/?(end|php)\])
  patterns: 
  - {include: source.php}
- comment: Python
  name: string.regexp.notes
  begin: (\[(cpy|py|python|rpy|pyw)\])
  end: (\[\\?\/?(end|cpy|py|python|rpy|pyw)\])
  patterns: 
  - {include: source.python}
- comment: R
  name: string.regexp.notes
  begin: (\[(r|s|rprofile)\])
  end: (\[\\?\/?(end|r|s|rprofile)\])
  patterns: 
  - {include: source.r}
- comment: Regex
  name: string.regexp.notes
  begin: (\[(re|regex|regexp)\])
  end: (\[\\?\/?(end|re|regex|regexp)\])
  patterns: 
  - {include: source.regexp}
- comment: Ruby
  name: string.regexp.notes
  begin: (\[(rb|rbx|rjs|ruby|Rakefile|rake|cgi|fcgi|gemspec|irbrc|capfile|gemfile)\])
  end: (\[\\?\/?(end|rb|rbx|rjs|ruby|Rakefile|rake|cgi|fcgi|gemspec|irbrc|capfile|gemfile)\])
  patterns: 
  - {include: source.ruby}
- comment: Scala
  name: string.regexp.notes
  begin: (\[(scala)\])
  end: (\[\\?\/?(end|scala)\])
  patterns: 
  - {include: source.scala}
- comment: Shell
  name: string.regexp.notes
  begin: (\[(sh|bash|zsh|bashrc)\])
  end: (\[\\?\/?(end|sh|bash|zsh|bashrc)\])
  patterns: 
  - {include: source.shell}
- comment: SQL
  name: string.regexp.notes
  begin: (\[(sql|dml|ddl|mysql)\])
  end: (\[\\?\/?(end|sql|dml|ddl|mysql)\])
  patterns: 
  - {include: source.sql}
- comment: TCL
  name: string.regexp.notes
  begin: (\[(tcl)\])
  end: (\[\\?\/?(end|tcl)\])
  patterns: 
  - {include: source.tcl}
- comment: TeX
  name: string.regexp.notes
  begin: (\[(tex|latex|sty|cls)\])
  end: (\[\\?\/?(end|tex|latex|sty|cls)\])
  patterns: 
  - {include: text.tex}
- comment: XML
  name: string.regexp.notes
  begin: (\[(xml|tld|jsp|pt|cpt|dtml|rss|opml)\])
  end: (\[\\?\/?(end|xml|tld|jsp|pt|cpt|dtml|rss|opml)\])
  patterns: 
  - {include: text.xml}
- comment: XSL
  name: string.regexp.notes
  begin: (\[(xsl|xslt)\])
  end: (\[\\?\/?(end|xsl|xslt)\])
  patterns: 
  - {include: text.xml.xsl}
- comment: YAML
  name: string.regexp.notes
  begin: (\[(yaml|yml)\])
  end: (\[\\?\/?(end|yaml|yml)\])
  patterns: 
  - {include: source.yaml}

- comment: Urls
  name: support.class.notes
  match: (([a-zA-Z]{3,6}3?\:\/\/)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)))
- comment: Comments
  name: comment.notes
  match: (?<!\:)(\/\/.*)

- comment: Line breaks
  name: support.function.notes
  match: ^(\-[\-\=]{2}.*)
- comment: Ordered bullets
  name: keyword.operator.notes
  match: ^([ \t]*[0-9a-z]+[\:\.\)]\)?\s(\w+\:)?)
  captures:
    '2': {name: keyword.other.notes}
- comment: Unordered bullets
  name: variable.language.notes
  match: ^(\t*[\-\=\.]+\s(\w+\:)?)
  captures:
    '2': {name: keyword.other.notes}
- comment: Emphasis
  name: keyword.other.notes
  match: (\*+[a-zA-Z \t]+\*+)
- comment: Arrows
  name: variable.language.notes
  match: (-+>||=+>||<=+||<-+)
- comment: Important, surrounded by <...>
  name: constant.other.date.notes
  match: (\<[^\>]*\>)
- comment: Highlights
  name: nothing.notes
  match: ^[^\#]*(\#+[^\#]*\#*)
  captures: 
    '1': {name: variable.language.notes}
- comment: Headers
  name: entity.name.tag.notes
  match: ^([A-Z].*\:)$
- comment: Proper headers
  name: entity.name.tag.notes
  match: ^([-=]+\s?\w[\w\s]*[\-=]+)
- comment: Single Quotes
  name: string.quoted.single.notes
  match: (\'[^\']*\')
- comment: Double Quotes
  name: string.quoted.double.notes
  match: (\"[^\"]*\")
- comment: Warning/critical
  name: invalid.deprecated.notes
  match: (?![a-zA-Z])\!+[^\!\n\r]+\!*
- comment: Emphasis on parentheses
  name: keyword.operator
  match: ([\(\)])
- comment: Top-level vocab definitions
  name: keyword.other.notes
  match: ^((\w+\s?\w*\:)(?=[ \t][\w\d]))
...